#!/usr/bin/env python3
import os
import apt

# Set environment variables
cache = apt.Cache()
package_list = ['most', 'ttf-mscorefonts-installer', 'pydf', 'build-essential']
python_packages = ['python3', 'python3-setuptools', 'python3-dev', 'python3-pip', 'python3-venv']

# -----------------
#homedir = os.getenv("HOME") + '/'
#repodir = os.getenv("HOME") + '/dotfiles/'
#links = os.listdir(repodir)
#mounts = os.listdir("/mnt")
#ignore = ['.git', '.gitignore', 'README.md', 'setup.py', 'setup',
#        'foxyproxy.json', 'wpscan']
#windowsdirs = ['']
# -----------------

def print_green(message):
    print("\n\033[1;33;40m>>> \033[1;37;40m" + message + "\033[0;37;0m")

def print_yellow(message):
    print("\033[1;33;40m>>> \033[1;37;40m" + message + "\033[0;37;0m")

def update_packages():
    '''Do a general update of the system packages'''
    print_green("General Update")
    updatecmds ['update', 'upgrade', 'dist-upgrade', 'autoremove']
    for updatecmd in updatecmds:
        os.system("sudo apt -y " + updatecmd)
update_packages()

# Install Missing Packages
def package_install(package, cache):
    if cache[package].is_installed:
        print_yellow("Package '" + package + "' already installed")
    else
        cmdstring = "sudo apt install -y " + package
        if package == "pip": cmdstring += " && sudo pip3 install --upgrade pip"
        os.command(cmdstring)

print_green("Installing missing packages")
for package in package_list:
    package_install(package, cache)

# Install Python and useful libraries
print_green("Installing Python 3")
for package in python_packages:
    package_install(package, cache)









'''

# Create Directories
def linkfolder(windowspath, linkname):
    linkpath = homedir + linkname
    if not os.path.exists(linkpath):
        cmdstring = "ln -s %s %s" % ('/mnt/c/Users/' + os.getenv("USER")
                + windowspath, linkpath)
        os.system(cmdstring)

if os.path.exists('/mnt/c'):
    linkfolder('/Dropbox', 'dropbox')
    linkfolder('/Google\ Drive', 'gdrive')
    linkfolder('/Downloads', 'downloads')


# Simlink dotfiles
for link in links:
    if link not in ignore and not os.path.exists(homedir + '.' + link):
        print("\033[1;32;40m>>> \033[1;37;40mLinking: %s\033[0;37;0m" % link)
        cmdstring = "ln -s %s%s %s.%s" % (repodir, link, homedir, link)
        os.system(cmdstring)

# Download git plugins
if not os.path.exists(repodir + 'vim/bundle'):
    cmdstring = "mkdir %s" % repodir + 'vim/bundle'
    os.system(cmdstring)

def gitsync(gitrepo, gitname):
    if not os.path.exists(repodir + 'vim/bundle'):
        cmdstring = "mkdir %s" % repodir + 'vim/bundle'
    if not os.path.exists(repodir + 'vim/bundle/' + gitname):
        print("\n\033[1;32;40m>>> \033[1;37;40mSyncing: %s\033[0;37;0m" % gitname)
        cmdstring = "mkdir %s" % repodir + 'vim/bundle/' + gitname
        os.system(cmdstring)
        cmdstring = "git -C %svim/bundle/ clone %s" % (repodir, gitrepo)
        os.system(cmdstring)
    return

gitsync('https://github.com/jiangmiao/auto-pairs', 'auto-pairs')
gitsync('https://github.com/PProvost/vim-ps1', 'vim-ps1')
gitsync('https://github.com/scrooloose/nerdtree', 'nerdtree')
gitsync('https://github.com/Xuyuanp/nerdtree-git-plugin', 'nerdtree-git-plugin')
gitsync('https://github.com/tpope/vim-sensible', 'sensible-vim')
gitsync('https://github.com/jistr/vim-nerdtree-tabs', 'vim-nerdtree-tabs')
gitsync('https://github.com/pangloss/vim-javascript', 'vim-javascript')
gitsync('https://github.com/itchyny/lightline.vim', 'lightline.vim')
gitsync('https://github.com/plasticboy/vim-markdown', 'vim-markdown')





echo -ne $GREEN"\n>>> "$ENDCOLOR; echo "Updating Pip packages"
if python3 -c "import pipenv" &> /dev/null; then
    echo -ne $YELLOW">>> "$ENDCOLOR; echo "Package 'pipenv' already installed"
else sudo pip3 install --upgrade pipenv; fi

if python3 -c "import pylint" &> /dev/null; then
    echo -ne $YELLOW">>> "$ENDCOLOR; echo "Package 'pylint' already installed"
else sudo pip3 install --upgrade pylint; fi


# Create personal directory structure and sync useful repos -------------------
echo -ne $GREEN"\n>>> "$ENDCOLOR; echo "Creating Directories & Syncing Repos"
if [ -d ~/x ]; then
    echo -ne $YELLOW">>> "$ENDCOLOR; echo "Personal repo directory 'x' exists"
else
    mkdir ~/x
fi

if [ -d ~/z ]; then
    echo -ne $YELLOW">>> "$ENDCOLOR; echo "External repo directory 'z' exists"
else
    mkdir ~/z
fi

if [ -d ~/x/security ]; then
    echo -ne $YELLOW">>> "$ENDCOLOR; echo "Personal repo 'security' exists"
else git clone git@github.com:rafaelh/security.git ~/x/security; fi

if [ -d ~/x/notes ]; then
    echo -ne $YELLOW">>> "$ENDCOLOR; echo "Personal repo 'notes' exists"
else git clone git@github.com:rafaelh/notes.git ~/x/notes; fi

if [ -d ~/z/seclists ]; then
    echo -ne $YELLOW">>> "$ENDCOLOR; echo "External repo 'seclists' exists"
else git clone https://github.com/danielmiessler/SecLists ~/z/seclists; fi

if [ -d ~/z/impacket ]; then
    echo -ne $YELLOW">>> "$ENDCOLOR; echo "External repo 'impacket' exists"
else
    git clone https://github.com/SecureAuthCorp/impacket ~/z/impacket
    pip install ~/z/impacket
fi
'''