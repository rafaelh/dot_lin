#!/usr/bin/env python3
import os
import apt
import subprocess
import sys

# Set environment variables
cache = apt.Cache()
installed_pip_packages = [r.decode().split('==')[0] for r in \
    subprocess.check_output([sys.executable, '-m', 'pip', 'freeze']).split()]

personal_repo_directory = os.getenv("HOME") + '/x'
external_repo_directory = os.getenv("HOME") + '/z'
package_list = ['most', 'ttf-mscorefonts-installer', 'pydf', 'build-essential']
python_packages = ['python3', 'python3-setuptools', 'python3-dev', 'python3-pip', 'python3-venv']
pip_packages = ['pipenv', 'pylint']

# -----------------
#homedir = os.getenv("HOME") + '/'
#repodir = os.getenv("HOME") + '/dotfiles/'
#links = os.listdir(repodir)
#mounts = os.listdir("/mnt")
#ignore = ['.git', '.gitignore', 'README.md', 'setup.py', 'setup',
#        'foxyproxy.json', 'wpscan']
#windowsdirs = ['']
# -----------------

def print_green(message):
    print("\n\033[1;32;40m>>> \033[1;37;40m" + message + "\033[0;37;0m")

def print_yellow(message):
    print("\033[1;33;40m>>> \033[0;37;40m" + message + "\033[0;37;0m")

def print_red(message):
    print("\033[0;31;40m>>> \033[1;37;40m" + message + "\033[0;37;0m")

def update_packages():
    ''' Do a general update of the system packages '''
    print_green("General Update")
    updatecmds = ['update', 'upgrade', 'dist-upgrade', 'autoremove']
    for updatecmd in updatecmds:
        os.system("sudo apt -y " + updatecmd)
#update_packages()

# Install Missing Packages
def package_install(package, cache):
    if cache[package].is_installed:
        print_yellow("Package '" + package + "' already installed")
    else:
        print_red(" Installing " + package)
        cmdstring = "sudo apt install -y " + package
        if package == "pip": cmdstring += " && sudo pip3 install --upgrade pip"
        os.system(cmdstring)

print_green("Installing missing packages")
for package in package_list:
    package_install(package, cache)

# Install Python and useful libraries
print_green("Installing Python 3")
for package in python_packages:
    package_install(package, cache)

def pip_package_install(pip_packages, installed_pip_packages):
    for package in pip_packages:
        if package in installed_pip_packages:
            print_yellow("Pip package '" + package + "' already installed")
        else:
            print_red("Installing pip package " + package)
            cmdstring = "sudo pip3 install --upgrade " + package
            os.system(cmdstring)

pip_package_install(pip_packages, installed_pip_packages)

def create_directory(directory):
    if os.path.exists(directory):
        print_yellow("Directory exists: " + directory)
    else:
        print_red("Creating directory: " + directory)
        cmdstring = "mkdir " + directory
        os.system(cmdstring)

print_green("Creating directory structure")
create_directory(personal_repo_directory)
create_directory(external_repo_directory)

def git_sync(gitrepo, directory):
    if os.path.exists(directory):
        print_yellow("Syncing " + directory)
        cmdstring = "git -C " + directory + " pull origin master"
        os.system(cmdstring)
    else:
        print_red("Cloning " + directory)
        cmdstring = "git -C " + gitrepo + " " + directory
        if directory == '/impacket': cmdstring += " && pip install " + external_repo_directory + '/impacket'
        os.system(cmdstring)

print_green("Syncing git repositories")
git_sync('https://github.com/danielmiessler/SecLists', external_repo_directory + '/seclists')
git_sync('https://github.com/SecureAuthCorp/impacket', external_repo_directory + '/impacket')


'''
# Create personal directory structure and sync useful repos -------------------

if [ -d ~/x/security ]; then
    echo -ne $YELLOW">>> "$ENDCOLOR; echo "Personal repo 'security' exists"
else git clone git@github.com:rafaelh/security.git ~/x/security; fi

if [ -d ~/x/notes ]; then
    echo -ne $YELLOW">>> "$ENDCOLOR; echo "Personal repo 'notes' exists"
else git clone git@github.com:rafaelh/notes.git ~/x/notes; fi

def main():
  # Program goes here

if __name__ == '__main__':
  main()


'''
